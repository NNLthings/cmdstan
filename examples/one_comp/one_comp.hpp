
// Code generated by stanc d26f65e8
#include <stan/model/model_header.hpp>
namespace one_comp_model_namespace {

using stan::io::dump;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;


stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<std::string> locations_array__ = 
{" (found before start of program)",
 " (in 'examples/one_comp/one_comp.stan', line 45, column 2 to column 20)",
 " (in 'examples/one_comp/one_comp.stan', line 46, column 2 to column 20)",
 " (in 'examples/one_comp/one_comp.stan', line 47, column 2 to column 20)",
 " (in 'examples/one_comp/one_comp.stan', line 48, column 2 to column 22)",
 " (in 'examples/one_comp/one_comp.stan', line 52, column 2 to column 17)",
 " (in 'examples/one_comp/one_comp.stan', line 54, column 4 to column 36)",
 " (in 'examples/one_comp/one_comp.stan', line 55, column 4 to column 80)",
 " (in 'examples/one_comp/one_comp.stan', line 53, column 2 to line 56, column 3)",
 " (in 'examples/one_comp/one_comp.stan', line 72, column 2 to column 18)",
 " (in 'examples/one_comp/one_comp.stan', line 74, column 4 to column 50)",
 " (in 'examples/one_comp/one_comp.stan', line 73, column 2 to line 74, column 50)",
 " (in 'examples/one_comp/one_comp.stan', line 61, column 2 to column 21)",
 " (in 'examples/one_comp/one_comp.stan', line 62, column 2 to column 21)",
 " (in 'examples/one_comp/one_comp.stan', line 63, column 2 to column 21)",
 " (in 'examples/one_comp/one_comp.stan', line 64, column 2 to column 23)",
 " (in 'examples/one_comp/one_comp.stan', line 68, column 4 to column 46)",
 " (in 'examples/one_comp/one_comp.stan', line 67, column 2 to line 68, column 46)",
 " (in 'examples/one_comp/one_comp.stan', line 26, column 2 to column 10)",
 " (in 'examples/one_comp/one_comp.stan', line 27, column 2 to column 13)",
 " (in 'examples/one_comp/one_comp.stan', line 29, column 2 to column 9)",
 " (in 'examples/one_comp/one_comp.stan', line 30, column 2 to column 9)",
 " (in 'examples/one_comp/one_comp.stan', line 32, column 2 to column 19)",
 " (in 'examples/one_comp/one_comp.stan', line 33, column 13 to column 16)",
 " (in 'examples/one_comp/one_comp.stan', line 33, column 2 to column 18)",
 " (in 'examples/one_comp/one_comp.stan', line 36, column 13 to column 16)",
 " (in 'examples/one_comp/one_comp.stan', line 36, column 2 to column 18)",
 " (in 'examples/one_comp/one_comp.stan', line 40, column 2 to column 23)",
 " (in 'examples/one_comp/one_comp.stan', line 41, column 2 to column 13)",
 " (in 'examples/one_comp/one_comp.stan', line 52, column 9 to column 12)",
 " (in 'examples/one_comp/one_comp.stan', line 52, column 14 to column 15)",
 " (in 'examples/one_comp/one_comp.stan', line 72, column 13 to column 16)",
 " (in 'examples/one_comp/one_comp.stan', line 7, column 4 to column 17)",
 " (in 'examples/one_comp/one_comp.stan', line 8, column 4 to column 24)",
 " (in 'examples/one_comp/one_comp.stan', line 9, column 4 to column 24)",
 " (in 'examples/one_comp/one_comp.stan', line 10, column 4 to column 24)",
 " (in 'examples/one_comp/one_comp.stan', line 11, column 4 to column 20)",
 " (in 'examples/one_comp/one_comp.stan', line 12, column 4 to column 20)",
 " (in 'examples/one_comp/one_comp.stan', line 13, column 4 to column 18)",
 " (in 'examples/one_comp/one_comp.stan', line 14, column 4 to column 48)",
 " (in 'examples/one_comp/one_comp.stan', line 17, column 6 to column 42)",
 " (in 'examples/one_comp/one_comp.stan', line 16, column 4 to line 17, column 42)",
 " (in 'examples/one_comp/one_comp.stan', line 19, column 4 to column 26)",
 " (in 'examples/one_comp/one_comp.stan', line 21, column 4 to column 16)",
 " (in 'examples/one_comp/one_comp.stan', line 6, column 41 to line 22, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
one_comp_mm_elim_abs(const T0__& t, const std::vector<T1__>& y,
                     const std::vector<T2__>& theta,
                     const std::vector<T3__>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(1, DUMMY_VAR__);
    
    local_scalar_t__ k_a;
    k_a = DUMMY_VAR__;
    
    current_statement__ = 33;
    k_a = theta[(1 - 1)];
    local_scalar_t__ K_m;
    K_m = DUMMY_VAR__;
    
    current_statement__ = 34;
    K_m = theta[(2 - 1)];
    local_scalar_t__ V_m;
    V_m = DUMMY_VAR__;
    
    current_statement__ = 35;
    V_m = theta[(3 - 1)];
    local_scalar_t__ D;
    D = DUMMY_VAR__;
    
    current_statement__ = 36;
    D = x_r[(1 - 1)];
    local_scalar_t__ V;
    V = DUMMY_VAR__;
    
    current_statement__ = 37;
    V = x_r[(2 - 1)];
    local_scalar_t__ dose;
    dose = DUMMY_VAR__;
    
    current_statement__ = 38;
    dose = 0;
    local_scalar_t__ elim;
    elim = DUMMY_VAR__;
    
    current_statement__ = 39;
    elim = (((V_m / V) * y[(1 - 1)]) / (K_m + y[(1 - 1)]));
    current_statement__ = 41;
    if (logical_gt(t, 0)) {
      current_statement__ = 40;
      dose = (((stan::math::exp((-k_a * t)) * D) * k_a) / V);
    } 
    current_statement__ = 42;
    assign(dydt, cons_list(index_uni(1), nil_index_list()), (dose - elim),
      "assigning variable dydt");
    current_statement__ = 43;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct one_comp_mm_elim_abs_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return one_comp_mm_elim_abs(t, y, theta, x_r, x_i, pstream__);
}
};

class one_comp_model final : public model_base_crtp<one_comp_model> {

 private:
  double t0;
  std::vector<double> C0;
  double D;
  double V;
  int N_t;
  std::vector<double> times;
  std::vector<double> C_hat;
  std::vector<double> x_r;
  std::vector<int> x_i;
 
 public:
  ~one_comp_model() { }
  
  inline std::string model_name() const final { return "one_comp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 d26f65e8", "stancflags = "};
  }
  
  
  one_comp_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "one_comp_model_namespace::one_comp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","t0","double",
          context__.to_vec());
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization","C0","double",
          context__.to_vec(1));
      C0 = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      assign(C0, nil_index_list(), context__.vals_r("C0"),
        "assigning variable C0");
      current_statement__ = 20;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec());
      D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      D = context__.vals_r("D")[(1 - 1)];
      current_statement__ = 21;
      context__.validate_dims("data initialization","V","double",
          context__.to_vec());
      V = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      V = context__.vals_r("V")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization","N_t","int",
          context__.to_vec());
      N_t = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N_t", N_t, 1);
      current_statement__ = 23;
      validate_non_negative_index("times", "N_t", N_t);
      current_statement__ = 24;
      context__.validate_dims("data initialization","times","double",
          context__.to_vec(N_t));
      times = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      assign(times, nil_index_list(), context__.vals_r("times"),
        "assigning variable times");
      current_statement__ = 25;
      validate_non_negative_index("C_hat", "N_t", N_t);
      current_statement__ = 26;
      context__.validate_dims("data initialization","C_hat","double",
          context__.to_vec(N_t));
      C_hat = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(C_hat, nil_index_list(), context__.vals_r("C_hat"),
        "assigning variable C_hat");
      current_statement__ = 27;
      x_r = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 27;
      assign(x_r, nil_index_list(), std::vector<double>{D, V},
        "assigning variable x_r");
      current_statement__ = 28;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 29;
      validate_non_negative_index("C", "N_t", N_t);
      current_statement__ = 30;
      validate_non_negative_index("C", "1", 1);
      current_statement__ = 31;
      validate_non_negative_index("C_ppc", "N_t", N_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static const char* function__ = "one_comp_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ k_a;
      k_a = DUMMY_VAR__;
      
      current_statement__ = 1;
      k_a = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        k_a = stan::math::lb_constrain(k_a, 0, lp__);
      } else {
        current_statement__ = 1;
        k_a = stan::math::lb_constrain(k_a, 0);
      }
      local_scalar_t__ K_m;
      K_m = DUMMY_VAR__;
      
      current_statement__ = 2;
      K_m = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        K_m = stan::math::lb_constrain(K_m, 0, lp__);
      } else {
        current_statement__ = 2;
        K_m = stan::math::lb_constrain(K_m, 0);
      }
      local_scalar_t__ V_m;
      V_m = DUMMY_VAR__;
      
      current_statement__ = 3;
      V_m = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        V_m = stan::math::lb_constrain(V_m, 0, lp__);
      } else {
        current_statement__ = 3;
        V_m = stan::math::lb_constrain(V_m, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      std::vector<std::vector<local_scalar_t__>> C;
      C = std::vector<std::vector<local_scalar_t__>>(N_t, std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      
      {
        std::vector<local_scalar_t__> theta;
        theta = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
        
        current_statement__ = 6;
        assign(theta, nil_index_list(), std::vector<local_scalar_t__>{k_a,
          K_m, V_m}, "assigning variable theta");
        current_statement__ = 7;
        assign(C, nil_index_list(),
          integrate_ode_bdf(one_comp_mm_elim_abs_functor__(), C0, t0, times,
            theta, x_r, x_i, pstream__), "assigning variable C");
      }
      {
        current_statement__ = 12;
        lp_accum__.add(cauchy_lpdf<propto__>(k_a, 0, 1));
        current_statement__ = 13;
        lp_accum__.add(cauchy_lpdf<propto__>(K_m, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(cauchy_lpdf<propto__>(V_m, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 17;
        for (int n = 1; n <= N_t; ++n) {
          current_statement__ = 16;
          lp_accum__.add(
            lognormal_lpdf<propto__>(C_hat[(n - 1)],
              stan::math::log(C[(n - 1)][(1 - 1)]), sigma));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static const char* function__ = "one_comp_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double k_a;
      k_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      k_a = in__.scalar();
      current_statement__ = 1;
      k_a = stan::math::lb_constrain(k_a, 0);
      double K_m;
      K_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      K_m = in__.scalar();
      current_statement__ = 2;
      K_m = stan::math::lb_constrain(K_m, 0);
      double V_m;
      V_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      V_m = in__.scalar();
      current_statement__ = 3;
      V_m = stan::math::lb_constrain(V_m, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      sigma = stan::math::lb_constrain(sigma, 0);
      std::vector<std::vector<double>> C;
      C = std::vector<std::vector<double>>(N_t, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      vars__.emplace_back(k_a);
      vars__.emplace_back(K_m);
      vars__.emplace_back(V_m);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        std::vector<double> theta;
        theta = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 6;
        assign(theta, nil_index_list(), std::vector<local_scalar_t__>{k_a,
          K_m, V_m}, "assigning variable theta");
        current_statement__ = 7;
        assign(C, nil_index_list(),
          integrate_ode_bdf(one_comp_mm_elim_abs_functor__(), C0, t0, times,
            theta, x_r, x_i, pstream__), "assigning variable C");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            vars__.emplace_back(C[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> C_ppc;
      C_ppc = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int n = 1; n <= N_t; ++n) {
        current_statement__ = 10;
        assign(C_ppc, cons_list(index_uni(n), nil_index_list()),
          lognormal_rng(stan::math::log(C[(n - 1)][(1 - 1)]), sigma,
            base_rng__), "assigning variable C_ppc");}
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        vars__.emplace_back(C_ppc[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double k_a;
      k_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      k_a = context__.vals_r("k_a")[(1 - 1)];
      double k_a_free__;
      k_a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      k_a_free__ = stan::math::lb_free(k_a, 0);
      double K_m;
      K_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      K_m = context__.vals_r("K_m")[(1 - 1)];
      double K_m_free__;
      K_m_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      K_m_free__ = stan::math::lb_free(K_m, 0);
      double V_m;
      V_m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      V_m = context__.vals_r("V_m")[(1 - 1)];
      double V_m_free__;
      V_m_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      V_m_free__ = stan::math::lb_free(V_m, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(k_a_free__);
      vars__.emplace_back(K_m_free__);
      vars__.emplace_back(V_m_free__);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("k_a");
    names__.emplace_back("K_m");
    names__.emplace_back("V_m");
    names__.emplace_back("sigma");
    names__.emplace_back("C");
    names__.emplace_back("C_ppc");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_t),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_t)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "k_a");
    param_names__.emplace_back(std::string() + "K_m");
    param_names__.emplace_back(std::string() + "V_m");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "C" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C_ppc" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "k_a");
    param_names__.emplace_back(std::string() + "K_m");
    param_names__.emplace_back(std::string() + "V_m");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "C" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "C_ppc" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"k_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"K_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"C\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"C_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"k_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"K_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"C\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"array\",\"length\":" << 1 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"C_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = one_comp_model_namespace::one_comp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return one_comp_model_namespace::profiles__;
}

#endif


